type Query {
    users: [User!]!
    posts: [Post!]!
}

type Mutation {
    login(email: String!, password: String!): AuthPayload!
    createUser(data: CreateUserInput): User!
    createPost(data: CreatePostInput): Post!
    createComment(data: CreateCommentInput): Comment!
}

type User {
    id: ID!
    name: String!
    age: Int!
    address: String!
    phone: String!
    password: String!
    city: City!
    email: String!
    posts: [Post!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  author: User!
  comments: [Comment!]!
  published: Boolean!
  city: City!
  region: String!
  updatedAt: String!
  createdAt: String!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  posts: Post!
  updatedAt: String!
  createdAt: String!
}

type City {
  id: ID!
  name: String!
  users: [User!]!
  posts: [Post!]!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    city: ID!
    region: String!
}

input CreateUserInput {
    name: String!
    age: Int!
    address: String!
    phone: String
    password: String!
    city: String!
    email: String!
}

input CreateCommentInput {
    text: String!
    post: ID!
}